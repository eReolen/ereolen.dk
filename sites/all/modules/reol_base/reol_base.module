<?php
/**
 * @file
 * Code for the eReolen base module feature.
 */

define('REOL_BASE_LOCAL_ID_PREFIX', 'isbn_');

/**
 * Get the field form for a field.
 *
 * @param string $type
 *   The entity type to get field for.
 * @param string $bundle
 *   The entity bundle for the entity.
 * @param string $field_name
 *   The name of the field.
 * @param StdClass $entity
 *   The entity to get field for.
 * @param array $form
 *   The form to attach field to.
 * @param array $form_state
 *   The state of the form.
 *
 * @return array
 *   The field form.
 */
function reol_base_get_field_form($type, $bundle, $field_name, $entity, &$form, &$form_state) {
  $field = field_info_field($field_name);
  $instance = field_info_instance($type, $field_name, $bundle);
  $lang_code = field_language($type, $entity, $field_name);
  $items = field_get_items($type, $entity, $field_name);
  return field_default_form($type, $entity, $field, $instance, $lang_code, $items, $form, $form_state);
}

/**
 * Implements hook_entity_load().
 *
 * As our provider uses ISBN-numbers, we wish to have localId be the
 * ISBN-number of the object.
 */
function reol_base_entity_load($entities, $type) {
  // Only act on our own type.
  if ($type != 'ting_object') {
    return;
  }

  foreach ($entities as $entity) {
    $entity->online_url = FALSE;

    if (!($entity instanceof TingEntity)) {
      continue;
    }
    // When have to check all the way down, as chain might be broken
    // somwhere. Only touch localId if we have the right value for it.
    if (isset($entity->reply) &&
      isset($entity->reply->record) &&
      isset($entity->reply->record['dc:identifier'])) {
      $local_id = FALSE;

      // Try to find the id we need in oss:PROVIDER-ID.
      if (isset($entity->reply->record['dc:identifier']['oss:PROVIDER-ID']) &&
        count($entity->reply->record['dc:identifier']['oss:PROVIDER-ID'] == 1)) {
        $local_id = reol_base_get_local_id($entity->reply->record['dc:identifier']['oss:PROVIDER-ID']);
      }
      // If not found there, look in dkdcplus:ISBN.
      elseif (isset($entity->reply->record['dc:identifier']['dkdcplus:ISBN']) &&
        count($entity->reply->record['dc:identifier']['dkdcplus:ISBN'])) {
        $local_id = reol_base_get_local_id($entity->reply->record['dc:identifier']['dkdcplus:ISBN']);
      }

      if ($local_id) {
        $entity->localId = $local_id;
      }
    }
  }
}

/**
 * Convert an array of ISBN-numbers to a local id.
 *
 * @param mixed $isbns
 *   The ISBN number array to convert.
 *
 * @return string
 *   The localId string.
 */
function reol_base_get_local_id($isbns) {
  // Make sure it is array,
  if (!is_array($isbns)) {
    $isbns = array($isbns);
  }

  $num = FALSE;
  foreach ($isbns as $isbn) {
    $isbn = str_replace('-', '', $isbn);
    // ISBN is the first 13-length number found.
    if (strlen($isbn) == 13) {
      $num = $isbn;
      break;
    }
  }

  // We have no ISBN-number to use.
  if (!$num) {
    return FALSE;
  }

  // Add our prefix and remove dashes that might appear.
  // We add the prefix to avoid strange conflicts with entities
  // that have their local id defined as the ISBN-number.
  return REOL_BASE_LOCAL_ID_PREFIX . $num;
}

/**
 * Convert the local id to an ISBN number.
 *
 * @param string $local_id
 *   The local id.
 *
 * @return string
 *   The ISBN number.
 */
function reol_base_get_isbn($local_id) {
  // Remove prefix in front, if found.
  // If not, it is not an ISBN-number.
  if (strpos($local_id, REOL_BASE_LOCAL_ID_PREFIX) === 0) {
    return substr($local_id, strlen(REOL_BASE_LOCAL_ID_PREFIX));
  }
  return FALSE;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Change material_item to use our template instead.
 */
function reol_base_theme_registry_alter(&$theme_registry) {
  $theme_registry['material_item']['template'] = drupal_get_path('module', 'reol_base') . '/templates/material_item';
}

/**
 * Implements hook_preprocess_HOOK().
 */
function reol_base_preprocess_material_item(&$variables) {
  $element = $variables['element'];
  // TODO Can we rely on this?
  $ding_entity_id = $element['#cover']['#object']->ding_entity_id;
  $ting_entity = ding_entity_load($ding_entity_id);

  $variables['type'] = reol_base_get_type_name($ting_entity->type);

  // Put buttons from entity view on list.
  $buttons = field_view_field('ting_object', $ting_entity, 'ding_entity_buttons', 'default');
  $variables['buttons'] = drupal_render($buttons);
}

/**
 * Get the name of a type from the type returned from Ting.
 *
 * If type is not input, it returns an array of names of
 * types we support.
 *
 * @param string $type
 *   The string type from Ting.
 *
 * @return string
 *   Our own name for the type, or array of type names if no type is input,
 *   keyed by our internal name of the type.
 *   If type is not found, FALSE is returned.
 */
function reol_base_get_type_name($type = FALSE) {
  $types = _reol_base_get_types();

  // If no argument received, return all types.
  if (!$type) {
    return $types;
  }

  // Find type.
  foreach ($types as $n => $t) {
    if ($t['ext_name'] == strtolower($type)) {
      return $n;
    }
  }

  // If we end up here, type not found.
  return FALSE;
}

/**
 * Implements hook_date_format_Types().
 */
function reol_base_date_format_types() {
  return array(
    'reol_base_material_lists_date' => t('Reol material lists date'),
  );
}
/**
 * Implements hook_date_formats().
 */
function reol_base_date_formats() {
  return array(
    array(
      'type' => 'reol_base_material_lists_date',
      'format' => 'j. F Y H:i:s',
      'locales' => array(),
    ),
  );
}

/**
 * Convert a string to an ISBN-13 number.
 *
 * @param string $isbn
 *   The isbn-number to convert.
 *
 * @return string|bool
 *   The ISBN-numer if input is an ISBN-13 number. False otherwise.
 */
function reol_base_convert_to_isbn($isbn) {
  $isbn = str_replace(array(' ', '-'), '', $isbn);
  return preg_match('/^[0-9]{13}$/', $isbn) ? $isbn : FALSE;
}

/**
 * Get definition of types we support.
 *
 * @return array
 *   Array of types keyed by our internal name. Containing the following info:
 *     External name (ext_name)
 *     Internal name (int_name)
 *     Title (title)
 */
function _reol_base_get_types() {
  return array(
    'audiobook' => array(
      'ext_name' => 'lydbog (net)',
      'int_name' => 'audiobook',
      'title' => t('Audiobook'),
      'path' => 'lydboeger',
    ),
    'ebook' => array(
      'ext_name' => 'ebog',
      'int_name' => 'ebook',
      'title' => t('E-book'),
      'path' => 'eboeger',
    ),
  );
}

/**
 * Get array of types you can choose from in field_reol_entity_type.
 *
 * @return array
 *   Array of types to choose from.
 */
function reol_base_get_entity_types() {
  return array_reduce(_reol_base_get_types(), function($carry, $elem) {
    $carry[$elem['int_name']] = $elem['title'];
    return $carry;
  }, array());
}

/**
 * Implements hook_field_widget_form_alter().
 */
function reol_base_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($element['#field_name'] == 'field_reol_entity_type') {
    // By default, selecting no type means all types. Change label.
    $element['#options']['_none'] = t('- All -');
  }
}

/**
 * Get ding entity id from an ISBN number.
 *
 * @param string $isbn
 *   The ISBN number to search for.
 *
 * @return string
 *   The Ding entity id.
 */
function reol_base_ding_entity_get_id($isbn) {
  module_load_include('client.inc', 'ting');
  // Get the id from a search in Ting.
  $res = ting_do_search("term.identifier=" . $isbn);
  list($id) = array_keys($res->collections);
  return $id;
}

/**
 * Remove a node type, that was previously supplied from a feature.
 *
 * Mainly used in .install file, but left here for convenience.
 *
 * @param string $type
 *   The machine name of the type to remove.
 */
function _reol_base_remove_node_type($type) {
  db_query("UPDATE node_type SET module = 'node', custom = 1, modified = 1, locked = 0 WHERE type = '%type';", array('%type' => $type));
  node_type_delete($type);
}
